"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TgBot = exports.BotApi = void 0;
const tslib_1 = require("tslib");
const fastify_plugin_1 = tslib_1.__importDefault(require("fastify-plugin"));
const telegraf_1 = require("telegraf");
const config_1 = require("../config/config");
const bot = new telegraf_1.Telegraf(config_1.ENV.TELEGRAF_TOKEN);
// bot.use(async (ctx, next) => await Logger(ctx, next))
bot.use((0, telegraf_1.session)({}));
bot.use((ctx, next) => {
    ctx.session = {
        flag: ctx.session?.flag ? ctx.session.flag : 'main',
        messageType: ctx.session?.messageType ? ctx.session.messageType : '',
        message: ctx.session?.message ? ctx.session.message : '',
    };
    next();
});
async function startBot(instance) {
    try {
        await instance.register(require('middie'));
        await instance.use(bot.webhookCallback(`/${config_1.ENV.TELEGRAF_TOKEN}`));
        await bot.telegram.setWebhook(`${config_1.ENV.WEB_HOOK_URL}/${config_1.ENV.TELEGRAF_TOKEN}`);
        await bot.launch();
    }
    catch (error) {
        console.log(error.message);
    }
    console.log('Bot running');
}
async function BotApiPlugin(instance, _, next) {
    instance.post(`/${process.env.BOT_TOKEN}`, (_, reply) => {
        reply.send({ root: true });
    });
    await startBot(instance);
    next();
}
exports.BotApi = (0, fastify_plugin_1.default)(BotApiPlugin);
exports.TgBot = bot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9wbHVnaW4vYm90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0RUFBZ0M7QUFDaEMsdUNBQXNEO0FBQ3RELDZDQUF1QztBQWdCdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFlLFlBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUzRCx3REFBd0Q7QUFDeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFBLGtCQUFPLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNoQyxHQUFHLENBQUMsT0FBTyxHQUFHO1FBQ1YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTTtRQUNuRCxXQUFXLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7S0FFM0QsQ0FBQTtJQUNELElBQUksRUFBRSxDQUFBO0FBQ1YsQ0FBQyxDQUFDLENBQUE7QUFDRixLQUFLLFVBQVUsUUFBUSxDQUFDLFFBQVE7SUFFNUIsSUFBSTtRQUNBLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMxQyxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLFlBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDakUsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQUcsQ0FBQyxZQUFZLElBQUksWUFBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7UUFFMUUsTUFBTSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7S0FDckI7SUFDRCxPQUFPLEtBQUssRUFBRTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQzdCO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM5QixDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUk7SUFFekMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDcEQsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekIsSUFBSSxFQUFFLENBQUE7QUFDVixDQUFDO0FBRVksUUFBQSxNQUFNLEdBQUcsSUFBQSx3QkFBRSxFQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFCLFFBQUEsS0FBSyxHQUFHLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcCBmcm9tICdmYXN0aWZ5LXBsdWdpbic7XHJcbmltcG9ydCB7IENvbnRleHQsIHNlc3Npb24sIFRlbGVncmFmIH0gZnJvbSAndGVsZWdyYWYnO1xyXG5pbXBvcnQgeyBFTlYgfSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcclxuXHJcbmludGVyZmFjZSBTZXNzaW9uRGF0YSB7XHJcbiAgICBmbGFnOiBzdHJpbmc7XHJcbiAgICBtZXNzYWdlVHlwZTogc3RyaW5nLFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgLy8gLi4uIG1vcmUgc2Vzc2lvbiBkYXRhIGdvIGhlcmVcclxufVxyXG5cclxuLy8gRGVmaW5lIHlvdXIgb3duIGNvbnRleHQgdHlwZVxyXG5leHBvcnQgaW50ZXJmYWNlIE15Qm90Q29udGV4dCBleHRlbmRzIENvbnRleHQge1xyXG4gICAgc2Vzc2lvbj86IFNlc3Npb25EYXRhXHJcblxyXG4gICAgLy8gLi4uIG1vcmUgcHJvcHMgZ28gaGVyZVxyXG59XHJcblxyXG5jb25zdCBib3QgPSBuZXcgVGVsZWdyYWY8TXlCb3RDb250ZXh0PihFTlYuVEVMRUdSQUZfVE9LRU4pO1xyXG5cclxuLy8gYm90LnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiBhd2FpdCBMb2dnZXIoY3R4LCBuZXh0KSlcclxuYm90LnVzZShzZXNzaW9uKHt9KSk7XHJcbmJvdC51c2UoKGN0eDogTXlCb3RDb250ZXh0LCBuZXh0KSA9PiB7XHJcbiAgICBjdHguc2Vzc2lvbiA9IHtcclxuICAgICAgICBmbGFnOiBjdHguc2Vzc2lvbj8uZmxhZyA/IGN0eC5zZXNzaW9uLmZsYWcgOiAnbWFpbicsXHJcbiAgICAgICAgbWVzc2FnZVR5cGU6IGN0eC5zZXNzaW9uPy5tZXNzYWdlVHlwZSA/IGN0eC5zZXNzaW9uLm1lc3NhZ2VUeXBlIDogJycsXHJcbiAgICAgICAgbWVzc2FnZTogY3R4LnNlc3Npb24/Lm1lc3NhZ2UgPyBjdHguc2Vzc2lvbi5tZXNzYWdlIDogJycsXHJcblxyXG4gICAgfVxyXG4gICAgbmV4dCgpXHJcbn0pXHJcbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0Qm90KGluc3RhbmNlKSB7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBpbnN0YW5jZS5yZWdpc3RlcihyZXF1aXJlKCdtaWRkaWUnKSlcclxuICAgICAgICBhd2FpdCBpbnN0YW5jZS51c2UoYm90LndlYmhvb2tDYWxsYmFjayhgLyR7RU5WLlRFTEVHUkFGX1RPS0VOfWApKVxyXG4gICAgICAgIGF3YWl0IGJvdC50ZWxlZ3JhbS5zZXRXZWJob29rKGAke0VOVi5XRUJfSE9PS19VUkx9LyR7RU5WLlRFTEVHUkFGX1RPS0VOfWApXHJcblxyXG4gICAgICAgIGF3YWl0IGJvdC5sYXVuY2goKVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnQm90IHJ1bm5pbmcnKVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBCb3RBcGlQbHVnaW4oaW5zdGFuY2UsIF8sIG5leHQpIHtcclxuXHJcbiAgICBpbnN0YW5jZS5wb3N0KGAvJHtwcm9jZXNzLmVudi5CT1RfVE9LRU59YCwgKF8sIHJlcGx5KSA9PiB7XHJcbiAgICAgICAgcmVwbHkuc2VuZCh7IHJvb3Q6IHRydWUgfSlcclxuICAgIH0pXHJcblxyXG4gICAgYXdhaXQgc3RhcnRCb3QoaW5zdGFuY2UpO1xyXG4gICAgbmV4dCgpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBCb3RBcGkgPSBmcChCb3RBcGlQbHVnaW4pO1xyXG5leHBvcnQgY29uc3QgVGdCb3QgPSBib3Q7XHJcbiJdfQ==