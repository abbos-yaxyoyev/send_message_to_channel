"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseServices = void 0;
const exceptions_1 = require("../constant/exceptions");
class BaseServices {
    constructor(model, errorConstructor = exceptions_1.CommonException) {
        this.model = model;
        this.errorConstructor = errorConstructor;
    }
    async count(query) {
        try {
            return await this.model.countDocuments(query);
        }
        catch (error) {
            throw error;
        }
    }
    async find(query, options, projection = { __v: 0 }) {
        try {
            return await this.model.find(query, projection, options);
        }
        catch (error) {
            throw error;
        }
    }
    async findOne(query, options, projection = { __v: 0 }) {
        try {
            return await this.model.findOne(query, projection, options);
        }
        catch (error) {
            throw error;
        }
    }
    async findById(id, options, projection = { __v: 0 }) {
        try {
            console.log('this.model: ', this.model);
            return await this.model.findOne({ _id: id, isDeleted: false }, projection, options);
        }
        catch (error) {
            throw error;
        }
    }
    async create(data, options) {
        try {
            const saved = await this.model.create([data], options);
            return await this.model.findById(saved[0]._id, {}, options);
        }
        catch (error) {
            if (error.code == 11000, error.name == "MongoError") {
                throw this.errorConstructor.AllreadyExist({ keyPattern: error.keyPattern, keyValue: error.keyValue }, this.model.collection.collectionName, error.message);
            }
            throw this.errorConstructor.UnknownError(error);
        }
    }
    async insertMany(data, options) {
        try {
            return await this.model.insertMany(data, options);
        }
        catch (error) {
            throw error;
        }
    }
    async deleteOne(query, options) {
        try {
            return await this.model.deleteOne(query, options);
        }
        catch (error) {
            throw this.errorConstructor.UnknownError(error);
        }
    }
    async updateOne(id, data, options) {
        try {
            await this.model.findOneAndUpdate({ _id: id, isDeleted: false }, data, options);
            return await this.model.findById(id);
        }
        catch (error) {
            throw this.errorConstructor.UnknownError(error);
        }
    }
    async updateOneByQuery(query, data, options) {
        try {
            return await this.model.findOneAndUpdate(query, data, options);
        }
        catch (error) {
            throw this.errorConstructor.UnknownError(error);
        }
    }
    async updateMany(query, data, options) {
        try {
            return await this.model.updateMany(query, data, options).exec();
        }
        catch (error) {
            throw error;
        }
    }
    async aggregate(pipeline, options) {
        try {
            return await this.model.aggregate(pipeline, options).allowDiskUse(true).exec();
        }
        catch (error) {
            throw error;
        }
    }
}
exports.BaseServices = BaseServices;
//# sourceMappingURL=data:application/json;base64,