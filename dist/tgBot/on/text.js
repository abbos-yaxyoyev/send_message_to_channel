"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hearsPlugin = void 0;
// üìö
const counter_model_1 = require("../../common/db/models/counter/counter.model");
const bot_1 = require("../../common/plugin/bot");
const chat_service_1 = require("../../common/service/chat/chat.service");
const message_service_1 = require("../../common/service/messages/message.service");
const keybord_1 = require("../../common/service/reply/keybord");
const user_service_1 = require("../../common/service/user/user.service");
const start_1 = require("../command/start");
async function hearsPlugin(instance, _, next) {
    bot_1.TgBot.on('text', async (ctx) => {
        console.log(ctx.message.text);
        console.log(ctx.session?.flag);
        switch (ctx.session?.flag) {
            case 'main':
                if (['1Ô∏è‚É£ high', '2Ô∏è‚É£ medium', '3Ô∏è‚É£ low'].includes(ctx.message.text)) {
                    ctx.session.flag = 'message';
                    ctx.session.messageType = ctx.message.text;
                    ctx.deleteMessage(ctx.message.message_id - 1);
                    ctx.deleteMessage(ctx.message.message_id);
                    return await ctx.replyWithHTML('Ok send me message', { reply_markup: { remove_keyboard: true } });
                }
                else {
                    ctx.deleteMessage(ctx.message.message_id - 1);
                    ctx.deleteMessage(ctx.message.message_id);
                    return await (0, start_1.commandStart)(ctx, 'Please send correct type! \n\n 1Ô∏è‚É£high,  2Ô∏è‚É£ medium,   3Ô∏è‚É£ low');
                }
                break;
            case 'message':
                ctx.session.flag = 'review';
                ctx.session.message = ctx.message.text;
                await (0, keybord_1.replyButtonService)(ctx, `Great \nType: ${ctx.session.messageType}\nMessage: ${ctx.session.message}`, [["üîÑ level ", "accept"]]);
                ctx.deleteMessage(ctx.message.message_id - 1);
                return ctx.deleteMessage(ctx.message.message_id);
                break;
            case 'review':
                if (ctx.message.text == 'üîÑ level') {
                    ctx.session.flag = 'main';
                    ctx.deleteMessage(ctx.message.message_id - 1);
                    ctx.deleteMessage(ctx.message.message_id);
                    return await (0, start_1.commandStart)(ctx, 'choose messages level');
                }
                else if (ctx.message.text == 'accept') {
                    ctx.deleteMessage(ctx.message.message_id);
                    ctx.session.flag = 'main';
                    //* dbga yozasiz
                    try {
                        let { message_id, chat, date, from } = ctx.update.message;
                        console.log("ctx.update.message: ", ctx.update.message);
                        console.log("ctx.session.messageType: ", ctx.session.messageType);
                        const user = await user_service_1.userService.findOne({ id: from.id, first_name: from.first_name });
                        if (!user) {
                            await user_service_1.userService.create(from);
                        }
                        const chatGroup = await chat_service_1.chatService.findOne({ id: chat.id });
                        if (!chatGroup) {
                            await chat_service_1.chatService.create(chat);
                        }
                        let increment = await counter_model_1.CounterModel.getValue('increment') || 1;
                        await message_service_1.messageService.create({
                            date,
                            message_id,
                            userId: from.id,
                            chatId: chat.id,
                            text: ctx.session.message,
                            type: ctx.session.messageType,
                            increment: increment
                        });
                        return await (0, keybord_1.replyButtonService)(ctx, `‚úÖ, you can send another message`, [['1Ô∏è‚É£ high ', '2Ô∏è‚É£ medium', '3Ô∏è‚É£ low']]);
                        //dbga yozasiz
                    }
                    catch (e) {
                        console.log("error: ", e);
                        ctx.session.flag = 'review';
                        ctx.deleteMessage(ctx.message.message_id);
                        return await (0, keybord_1.replyButtonService)(ctx, `choose üîÑ level or accept`, [["üîÑ level ", "accept"]]);
                    }
                }
                else {
                    ctx.session.flag = 'review';
                    ctx.deleteMessage(ctx.message.message_id);
                    return await (0, keybord_1.replyButtonService)(ctx, `choose üîÑ level or accept`, [["üîÑ level ", "accept"]]);
                }
                break;
            default:
                break;
        }
    });
    next();
}
exports.hearsPlugin = hearsPlugin;
//# sourceMappingURL=data:application/json;base64,